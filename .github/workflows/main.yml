name: Deploy with Docker

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${env.USERNAME}/myproject
  VERSION: latest
  NAME: newproject

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ubuntu-buildx-latest
          restore-keys: |
            ubuntu-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${env.USERNAME}
          password: ${env.TOKEN}
          # 우리가 방금 복사해서 setting secrets 에 붙여줬던 token 이다. 이름을 기억해 넣어주자.
          # 우리의 ghcr.io 에 접근하기 위함이다.
        
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: server-docker.buildx.outputs
          push: true
          tags: server-docker-image:latest
  
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-newproject ]
    # label-newproject 라는 이름으로 AWS EC2 가 Runner 를 작동시킬 때 사용했던 그 label
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${env.USERNAME}
          password: ${env.TOKEN}
      
      - name: Docker run
        run: |
          docker stop server-docker && docker rm server-docker && docker rmi server-docker-image:latest
          docker run -d -p ${env.PORT_NUM}:${env,PORT_NUM} --name newproject --restart always server-docker-image:latest
     
